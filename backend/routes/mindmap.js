const express = require('express');
const openai = require('../utils/openaiClient');
const { supabase } = require('../utils/supabaseClient');

const router = express.Router();

router.post('/mindmap', async (req, res) => {
  const { document_ids } = req.body;

  console.log('üü° Received document_ids:', document_ids);

  try {
    const { data: docs, error: fetchErr } = await supabase
      .from('documents')
      .select('text_content') // change this to match your actual column name
      .in('id', document_ids);

    if (fetchErr || !docs) {
      console.error('‚ùå Failed to fetch document text:', fetchErr);
      return res.status(500).json({ error: 'Failed to load document text.' });
    }

    const fullText = docs.map(doc => doc.text_content).join('\n\n');
    console.log('üß† Sending full text to GPT:', fullText.slice(0, 300)); // log only start

    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `Tu es un assistant juridique. √Ä partir d‚Äôun texte de d√©cision judiciaire, g√©n√®re une mind map hi√©rarchis√©e sous format JSON avec les cl√©s : "title" (string) et "children" (array r√©cursive).

Structure logique : Parties, Faits, Articles de loi, Motifs, Conclusion. Par contre il s'agit d'un resum√© et les documents ne suivent pas une structure attendue mais determine les elements importnts et g√©n√®re quand meme un mindmap qui sort l'essentiel du document logiquement. Evite aussi de generer des mindmaps avec des sections vides 

Retourne uniquement un objet JSON. Exemple :
{
  "title": "R√©sum√©",
  "children": [
    { "title": "Faits", "children": ["A", "B", "C"] },
    { "title": "Articles", "children": ["Article 1", "Article 2"] }
  ]
}`
        },
        { role: 'user', content: fullText }
      ]
    });

    const raw = completion.choices[0].message.content;
    console.log('üü¢ GPT raw response:', raw);

    let mindmap;
    try {
      mindmap = JSON.parse(raw);
    } catch (e) {
      console.error('‚ùå GPT did not return valid JSON:', raw);
      return res.status(500).json({ error: 'Mind map format error from GPT' });
    }

    res.json({ mindmap });

  } catch (err) {
    console.error('‚ùå GPT API Error:', err);
    res.status(500).json({ error: 'Erreur lors de la g√©n√©ration de la mind map.' });
  }
});

module.exports = router;

